{
    "genNotice" : [
        "/*********************************************************************************",
        "*     This Emitter Node Maya plugin was automatically generated by the Maya      *",
        "*                                generation wizard                               *",
        "**********************************************************************************/\n"
    ],

    "includes": [
        "#include \"%_#_EMITTERINCLUDE_#_%\"",
        "#include <maya/MObject.h>",
        "#include <maya/MObjectArray.h>",
        "#include <maya/MString.h>",
        "#include <maya/MStringArray.h>",
        "#include <maya/MVectorArray.h>",
        "#include <maya/MDoubleArray.h>",
        "#include <maya/MIntArray.h>",
        "#include <maya/MMatrix.h>",
        "#include <maya/MFnDependencyNode.h>",
        "#include <maya/MFnNumericAttribute.h>",
        "#include <maya/MFnCompoundAttribute.h>",
        "#include <maya/MFnEnumAttribute.h>",
        "#include <maya/MFnGenericAttribute.h>",
        "#include <maya/MFnMatrixAttribute.h>",
        "#include <maya/MFnMessageAttribute.h>",
        "#include <maya/MFnUnitAttribute.h>",
        "#include <maya/MFnVectorArrayData.h>",
        "#include <maya/MFnDoubleArrayData.h>",
        "#include <maya/MFnArrayAttrsData.h>",
        "#include <maya/MFnMatrixData.h>"
    ],

    "reqFns": [
        "const MTypeId %_#_CLASSNAME_#_%::m_typeId(0x70033);",
        "%_#_OBJDEC_#_%",
        "%_#_CLASSNAME_#_%::%_#_CLASSNAME_#_%()\n{\n\t// constructor for the plugin\n}",
        "%_#_CLASSNAME_#_%::~%_#_CLASSNAME_#_%()\n{\n\t// destructor for the plugin\n}",
        "void* %_#_CLASSNAME_#_%::creator()\n{\n\treturn new %_#_CLASSNAME_#_%;\n}\n",
        "MStatus %_#_CLASSNAME_#_%::compute(const MPlug& _plug, MDataBlock& _block)\n{\n\t// implement the main functionality of the plugin here\n\treturn MStatus::kSuccess;\n}",
        "MStatus %_#_CLASSNAME_#_%::initialize()\n{\n\t// this is where any attributes should be initiliased and any setup performed\n\tMStatus status;\n\n%_#_OBJINIT_#_%\n\n\treturn MStatus::kSuccess;\n}",
        "MStatus %_#_CLASSNAME_#_%::getWorldPosition(MPoint &_p)\n{\n%_#_GWPOSCONT_#_%\n}",
        "MStatus %_#_CLASSNAME_#_%::getWorldPosition(MDataBlock &_block, MPoint &_p)\n{\n%_#_GWPOSCONTBLOCK_#_%\n}",
        "void %_#_CLASSNAME_#_%::draw(M3dView &_view, const MDagPath &_path, M3dView::DisplayStyle _style, M3dView::DisplayStatus)\n{\n\t// implement your draw function here\n}"
    ],

    "emitFn": [
        "void %_#_CLASSNAME_#_%::emitParticle(const MVectorArray &_inPosAry, const MVectorArray &_inVelAry, const MIntArray &_countAry, double _dt, double _speed,",
                                                "\t\t\tdouble _inheritFactor, MVector _dirV, MVectorArray &_outPos, MVectorArray &_outVel, MDoubleArray &_outTime)\n{\n\n\t//This is where you can write emit operations for any particles\n}"
    ],

    "gwposcont": [
        "\tMStatus status;",
        "",
        "\tMObject thisNode = thisMObject();",
        "\tMFnDependencyNode fnThisNode(thisNode);",
        "",
        "\tMObject worldMatrixAttr = fnThisNode.attribute(\"worldMatrix\");",
        "",
        "\tMPlug matrixPlug(thisNode, worldMatrixAttr);",
        "\tmatrixPlug = matrixPlug.elementByLogicalIndex(0);",
        "",
        "\tMObject matrixObject;",
        "\tstatus = matrixPlug.getValue(matrixObject);",
        "\tif(!status)",
        "\t{",
            "\t\treturn(status);",
        "\t}",
        "",
        "\tMFnMatrixData worldMatrixData(matrixObject, &status);",
        "\tif(!status)",
        "\t{",
            "\t\treturn(status);",
        "\t}",
        "",
        "\tMMatrix worldMatrix = worldMatrixData.matrix(&status);",
        "\tif(!status)",
        "\t{",
            "\t\treturn(status);",
        "\t}",
        "",
        "\t_p[0] = worldMatrix(3,0);",
        "\t_p[1] = worldMatrix(3,1);",
        "\t_p[2] = worldMatrix(3,2);",
        "",
        "\treturn(status);"
    ],

    "gwposcontblock": [
        "\tMStatus status;",
        "",
        "\tMObject thisNode = thisMObject();",
        "\tMFnDependencyNode fnThisNode(thisNode);",
        "",
        "\tMObject worldMatrixAttr = fnThisNode.attribute(\"worldMatrix\");",
        "",
        "\tMPlug matrixPlug(thisNode, worldMatrixAttr);",
        "\tmatrixPlug = matrixPlug.elementByLogicalIndex(0);",
        "\tMDataHandle hWMatrix = _block.inputValue(matrixPlug, &status);",
        "",
        "\tif(status == MS::kSuccess)",
        "\t{",
            "\t\tMMatrix wMatrix = hWMatrix.asMatrix();",
            "\t\t_p[0] = wMatrix(3,0);",
            "\t\t_p[1] = wMatrix(3,1);",
            "\t\t_p[2] = wMatrix(3,2);",
        "\t}",
        "\telse",
        "\t{",
            "\t\treturn status;",
        "\t}",
        "",
        "\treturn(status);"
    ]
}
