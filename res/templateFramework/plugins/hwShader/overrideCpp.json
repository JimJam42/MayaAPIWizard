{
    "genNotice" : [
        "//************************************************************************************",
        "//     This Hardware Shader Maya plugin was automatically generated by the Maya      *",
        "//                                 generation wizard                                 *",
        "//************************************************************************************/\n"
    ],

    "includes": [
        "#include \"%_#_HWOVERRIDEINCLUDE_#_%\"",
        "#include \"%_#_HWINCLUDE_#_%\"",
        "#include <maya/MString.h>",
        "#include <maya/MDrawContext.h>"
    ],

    "reqFns": [
        "%_#_CLASSNAME_#_%::%_#_CLASSNAME_#_%(const MObject &_obj) : MHWRender::MPxShaderOverride(_obj)\n{",
            "\tMHWRender::MRenderer* renderer = MHWRender::MRenderer::theRenderer();",
            "\tif (!renderer)\n\treturn;",
            "",
            "\tconst MHWRender::MShaderManager* shaderMgr = renderer->getShaderManager();",
            "\tif (!shaderMgr)\n\treturn;\n}",
        "%_#_CLASSNAME_#_%::~%_#_CLASSNAME_#_%()\n{\n\n}",
        "MHWRender::MPxShaderOverride* %_#_CLASSNAME_#_%::creator(const MObject &_obj)\n{\n\treturn new %_#_CLASSNAME_#_%(_obj);\n}",
        "MString %_#_CLASSNAME_#_%::initialize(const MInitContext &_initContext, MInitFeedback &_initFeedback)\n{",
            "\tMString empty;",
            "",
            "\tMHWRender::MVertexBufferDescriptor positionDesc(empty, MHWRender::MGeometry::kPosition, MHWRender::MGeometry::kFloat, 3);",
            "\tMHWRender::MVertexBufferDescriptor uvDesc(empty, MHWRender::MGeometry::kTexture, MHWRender::MGeometry::kFloat, 2);",
            "",
            "\taddGeometryRequirement(positionDesc);",
            "\taddGeometryRequirement(uvDesc);",
            "\t// add any more initialization needs here",
            "\treturn MString(\"%_#_CLASSNAME_#_%\");\n}",
        "void %_#_CLASSNAME_#_%::updateDG(MObject _object)\n{\n\n}",
        "void %_#_CLASSNAME_#_%::updateDevice()\n{\n\n}",
        "void %_#_CLASSNAME_#_%::endUpdate()\n{\n\n}",
        "bool %_#_CLASSNAME_#_%::handlesDraw(MHWRender::MDrawContext &_context)\n{",
            "\tconst MHWRender::MPassContext& pCont = _context.getPassContext();",
            "\tconst MStringArray& pSem = pCont.passSemantics();",
            "\tbool hPass = false;",
            "\t// add draw context here",
            "\treturn hPass;\n}",
        "void %_#_CLASSNAME_#_%::activateKey(MHWRender::MDrawContext &_context, const MString &_key)\n{\n\n}",
        "bool %_#_CLASSNAME_#_%::draw(MHWRender::MDrawContext &_context,const MHWRender::MRenderItemList &_renderItemList) const\n{\n\t// implement your draw call here\n\treturn false;\n}",
        "void %_#_CLASSNAME_#_%::terminateKey(MHWRender::MDrawContext &_context, const MString &_key)\n{\n\n}",
        "MHWRender::DrawAPI %_#_CLASSNAME_#_%::supportedDrawAPIs() const\n{\n\t//Here is where you can return which APIs are supported for this shader\n}",
        "bool %_#_CLASSNAME_#_%::isTransparent()\n{\n\treturn false;\n}",
        "bool %_#_CLASSNAME_#_%::overridesDrawState()\n{\n\treturn false;\n}"
    ]
}
