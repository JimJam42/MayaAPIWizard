{
    "genNotice" : [
        "/*************************************************************************",
        "*     This Node Maya plugin was automatically generated by the Maya      *",
        "*                           generation wizard                            *",
        "*************************************************************************/"
    ],

    "includes": [
        "#include <maya/%_#_NODETYPEINCLUDE_#_%.h>",
        "#include <maya/MGlobal.h>",
        "#include <maya/MFnDependencyNode.h>",
        "#include <maya/MObject.h>",
        "#include <maya/MTypeId.h>",
        "#include <maya/MPlug.h>",
        "#include <maya/MPlugArray.h>",
        "#include <maya/MStatus.h>",
        "#include <maya/MString.h>",
        "#include <maya/MVector.h>",
        "#include <maya/MDataBlock.h>",
        "#include <maya/MDataHandle.h>",
        "#include <maya/MColor.h>",
        "#include <maya/M3dView.h>",
        "#include <maya/MDistance.h>",
        "#include <maya/MFnUnitAttribute.h>",
        "#include <maya/MMatrix.h>",
        "#include <maya/MPxTransformationMatrix.h>",
        "#include <maya/MVector.h>",
        "#include <maya/MMatrix.h>"
    ],

    "reqPubAttribs": [
        "\tstatic const MTypeId m_typeId;",
        "\tstatic const MString m_typeName;"
    ],

    "reqFns": [
        "\tvirtual MStatus compute(const MPlug &_plug, MDataBlock &_data);",
        "\tstatic MStatus initialize();"
    ],

    "dependNodeFns": [
        "\tvirtual MStatus setDependentsDirty( const MPlug &_plugBeingDirtied, MPlugArray &_affectedPlugs );"
    ],

    "locatorNodeFns": [
        "\tvirtual void draw(M3dView &_view, const MDagPath &_path, M3dView::DisplayStyle _style, M3dView::DisplayStatus _status);",
        "\tvirtual bool isBounded() const;",
        "\tvirtual MBoundingBox boundingBox() const;"
    ],

    "deformerNodeFns": [
        "\tvirtual MStatus deform(MDataBlock &_block, MItGeometry &_iter, const MMatrix &_mat, unsigned int _multiIndex);"
    ],

    "manipContainNodeFns": [
        "\tvirtual MStatus createChildren();",
        "\tvirtual MStatus connectToDependNode(const MObject &_node);",
        "\tvirtual void draw(M3dView &_view, const MDagPath &_path, M3dView::DisplayStyle _style, M3dView::DisplayStatus _status);"
    ],

    "ikSolveNodeFns": [
        "\tvirtual MStatus doSolve();",
        "\tvirtual MString solverTypeName() const;"
    ],

    "hwShaderNodeFns": [
        "\tvirtual void postConstructor();",
        "\tvirtual MStatus bind(const MDrawRequest &_request, M3dView &_view);",
        "\tvirtual MStatus unbind(const MDrawRequest &_request, M3dView &_view);",
        "\tvirtual MStatus geometry(const MDrawRequest &_request, M3dView &_view, int _prim, unsigned int _writable,",
                                "\t\t\t\tint _indexCount, const unsigned int *_indexArray, int _vertexCount, const int *_vertexIDs,",
                                "\t\t\t\tconst float *_vertexArray, int _normalCount, const float **_normalArrays, int _colorCount,",
                                "\t\t\t\tconst float **_colorArrays, int _texCoordCount, const float **_texCoordArrays);"
    ],

    "transformNodeFns": [
        "\tvirtual MPxTransformationMatrix *createTransformationMatrix();",
        "\tvirtual void postConstructor();",
        "\tvirtual MStatus validateAndSetValue(const MPlug &_plug, const MDataHandle &_handle, const MDGContext &_context);",
        "\tvirtual void resetTransformation (MPxTransformationMatrix *);",
        "\tvirtual void resetTransformation (const MMatrix &);"
    ],

    "imagePlaneNodeFns": [
        "\tvirtual MStatus loadImageMap( const MString &_fileName, int _frame, MImage &_image );",
        "\tvirtual bool getInternalValueInContext(const MPlug&, MDataHandle&,  MDGContext&);",
        "\tvirtual bool setInternalValueInContext(const MPlug&, const MDataHandle&, MDGContext&);"
    ],

    "constraintNodeFns": [
        "\tvirtual void postConstructor();",
        "\tvirtual const MObject weightAttribute() const;",
        "\tvirtual const MObject targetAttribute() const;",
        "\tvirtual void getOutputAttributes(MObjectArray& attributeArray);"
    ],

    "manipNodeFns": [
        "\tvirtual void draw(M3dView &_view, const MDagPath &_path,M3dView::DisplayStyle _style, M3dView::DisplayStatus _status);",
        "\tvirtual MStatus doPress(M3dView &_view);",
        "\tvirtual MStatus doDrag(M3dView &_view);",
        "\tvirtual MStatus doRelease(M3dView &_view);",
        "\tvirtual MStatus connectToDependNode(const MObject &_dependNode);"
    ]
}
